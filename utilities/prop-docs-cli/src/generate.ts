#! /usr/bin/env node
/* eslint-disable prettier/prettier */
import chalk from 'chalk';
import { existsSync, mkdirSync, writeFile } from 'fs';
import { join } from 'path';
import type { ComponentDoc } from 'react-docgen-typescript';
import { parse } from 'react-docgen-typescript';
import { paramCase } from 'text-case';

import { cleanDirectory } from './clean-directory.js';
import type { Config, Manifest } from './types.js';

const options = {
  savePropValueAsString: true,
};

const manifestFileImports = '';
const manifestFileExports: Manifest = {};

export const generate = ({
  config,
  isTypeScript,
}: {
  config: Config;
  isTypeScript: boolean;
}) => {
  console.log(chalk.green('Generating prop docs ▶️'));

  const fileExtension = isTypeScript ? 'ts' : 'js';

  // 1. Create prop docs directory if it doesn’t exist.
  if (!existsSync(config.outputDir)) {
    mkdirSync(join(process.cwd(), config.outputDir));
  }

  // 2. Remove old doc files.
  cleanDirectory(config.outputDir);

  // 3. Generate prop doc file for each path in configuration.
  config.componentPaths.forEach((path) => {
    let result: ComponentDoc[] = [];

    try {
      result = parse(path, options);

      // 3.1 Generate a prop doc file for each component.
      result.forEach((component) => {
        const displayName = component.displayName;

        // 3.2 Add the component to the manifest file.
        manifestFileImports.concat(
          `import ${component.displayName} from './${paramCase(
            displayName,
          )}.props.${fileExtension}';\n`,
        );
        manifestFileExports[component.displayName] = component;

        const file = `/**
* THIS IS AN AUTOGENERATED FILE. ALL CHANGES WILL BE LOST.
*/
${isTypeScript ? "import type { PropsDoc } from '@microsoft/arbutus.prop-docs-cli';\n" : ''}
const propsDoc${isTypeScript ? ': PropsDoc' : ''} = ${JSON.stringify(component, null, 2)};

export default propsDoc;
`;
        const filePath = `${config.outputDir}/${paramCase(displayName)}.props.${fileExtension}`;

        writeFile(join(process.cwd(), filePath), file, function (err) {
          if (err) {
            return console.error(chalk.red(err));
          }
          console.log(chalk.green(`Docs for ${displayName} saved to ${filePath} ✅`));
        });
      });
    } catch (err) {
      console.error(chalk.red(`Error parsing ${path}`));

      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
      err?.message && console.error(err?.message);
    }
  });

  // 4. Generate manifest file.
  const manifestFileContents = `/**
* THIS IS AN AUTOGENERATED FILE. ALL CHANGES WILL BE LOST.
*/
${isTypeScript ? "import type { Manifest } from '@microsoft/arbutus.prop-docs-cli';\n" : ''}
${manifestFileImports}
const manifest${isTypeScript ? ': Manifest' : ''} = ${JSON.stringify(manifestFileExports)};

export default manifest;
`;
  const manifestFilePath = `${config.outputDir}/index.${fileExtension}`;

  writeFile(join(process.cwd(), manifestFilePath), manifestFileContents, function (err) {
    if (err) {
      return console.error(chalk.red(err));
    }
    console.log(chalk.green(`Manifest saved to ${manifestFilePath} ✅`));
  });
};
