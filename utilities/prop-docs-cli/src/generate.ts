#! /usr/bin/env node
import chalk from 'chalk';
import { existsSync, mkdirSync, writeFile } from 'fs';
import { join } from 'path';
import type { ComponentDoc } from 'react-docgen-typescript';
import { parse } from 'react-docgen-typescript';
import { paramCase } from 'text-case';

import { cleanDirectory } from './clean-directory.js';
import type { Config, Manifest } from './types.js';

const options = {
  savePropValueAsString: true,
};

const manifestFileImports = '';
const manifestFileExports: Manifest = {};

export const generate = ({ config }: { config: Config }) => {
  console.log(chalk.green('Generating prop docs ▶️'));

  // 1. Create prop docs directory if it doesn’t exist.
  if (!existsSync(config.outputDir)) {
    mkdirSync(join(process.cwd(), config.outputDir));
  }

  // 2. Remove old doc files.
  cleanDirectory(config.outputDir);

  // 3. Generate prop doc file for each path in configuration.
  config.componentPaths.forEach((path) => {
    let result: ComponentDoc[] = [];

    try {
      result = parse(path, options);

      // 3.1 Generate a prop doc file for each component.
      result.forEach((component) => {
        const displayName = component.displayName;

        // 3.2 Add the component to the manifest file.
        manifestFileImports.concat(
          `import ${component.displayName} from './${paramCase(
            displayName,
          )}.props.js';\n`,
        );
        manifestFileExports[component.displayName] = component;

        const file = `/**
* THIS IS AN AUTOGENERATED FILE. ALL CHANGES WILL BE LOST.
*/
export default ${JSON.stringify(component)};
`;
        const filePath = `${config.outputDir}/${paramCase(displayName)}.props.js`;

        writeFile(join(process.cwd(), filePath), file, function (err) {
          if (err) {
            return console.error(chalk.red(err));
          }
          console.log(chalk.green(`    Docs for ${displayName} saved to ${filePath} ✅`));
        });
      });
    } catch (err) {
      console.error(chalk.red(`Error parsing ${path}`));

      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
      err?.message && console.error(err?.message);
    }
  });

  // 4. Generate manifest file.
  const manifestFileContents = `/**
* THIS IS AN AUTOGENERATED FILE. ALL CHANGES WILL BE LOST.
*/
${manifestFileImports}
export default ${JSON.stringify(manifestFileExports)};
`;
  const manifestFilePath = `${config.outputDir}/index.js`;

  writeFile(join(process.cwd(), manifestFilePath), manifestFileContents, function (err) {
    if (err) {
      return console.error(chalk.red(err));
    }
    console.log(chalk.green(`    Manifest saved to ${manifestFilePath} ✅`));
  });
};
